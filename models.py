from typing import List, TypedDict
from langchain_core.pydantic_v1 import BaseModel, Field
from langchain.output_parsers import PydanticOutputParser


class RetrievedProblem(BaseModel):
    description: str = Field(description= "Description of retrieved problem")
    code: str = Field(description="Code block with code to solve retrieved problem")
    planning: str = Field(description="Detailed plan and approach to solve retrieved problem")
    algorithm: str = Field(description="""Algorithm identified to solve retrieved problem
                         along with high-level generic tutorial to solve that type of problem""")
        
class Exemplar(BaseModel):
    """List of relevant problems"""
    problems:List[RetrievedProblem] = Field(description="List of relevant problems and solutions")

class Plan(BaseModel):
    """
    Plan to solve the original problem with associated confidence score
    """
    plan_description: str = Field(description="Description of plan")
    confidence_score: float = Field(description="Confidence score for plan to solve original problem")
        
parser = PydanticOutputParser(pydantic_object=Exemplar)

class GraphState(TypedDict):
    """
    Represents the state of our graph.
    """

    problem: str = Field(description="The original problem which is to be solved")
    test_case_analysis: str = Field(description="Analysis of test cases")
    expected_output:str = Field(description="The correct output for the sample test cases")
    inferred_output: str = Field(description="Inferred output from test case analysis")
    test_case_analysis_iterations: int = Field(description="Tracks number of iterations made to test-case analysis")
    correct_understanding: bool = Field(description="Flag indicating whether test-case analysis is correct")
    relevant_problems: Exemplar = Field("Examples retrived by the retrival agent")
    plans: List[Plan] = Field("List of plans to solve the original problem with associated confidence score")
    cur_plan: int = Field(description="ID of the current plan being sent to coding agent")
    generated_code: str = Field(description="Code generated to solve original problem")
    code_exec_result: dict = Field(description="Result of code execution containing errors, if any")
    modified_plan: str = Field(description="Stores the modified plan generated by debugging agent")
    debug_iterations: List[int] = Field(description="Tracks the iteration count for each plan")
    taken_feedback: bool = Field(description="Flag indicating whether user input was taken")
    user_feedback: str = Field(description="Stores feedback from user guiding the system towards the right direction")

